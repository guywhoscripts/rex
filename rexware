local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local localPlayer = Players.LocalPlayer

-- Function to add highlight effect to a character
local function addOutline(player)
    if player == localPlayer then return end  -- Don't outline the local player
    
    local function applyHighlight(character)
        if character and not character:FindFirstChild("OutlineHighlight") then
            -- Create the Highlight object
            local highlight = Instance.new("Highlight")
            highlight.Name = "OutlineHighlight"
            highlight.FillTransparency = 1  -- Fully transparent fill
            highlight.OutlineTransparency = 0  -- Fully visible outline
            highlight.OutlineColor = Color3.fromRGB(255, 0, 0)  -- Red outline
            highlight.Parent = character
        end
    end

    -- Check if the player's character already exists and apply highlight
    if player.Character then
        applyHighlight(player.Character)
    end

    -- Listen for the player respawning and apply highlight to new character
    player.CharacterAdded:Connect(function(character)
        applyHighlight(character)
    end)
end

-- Function to add health display above a player's head
local function addHealthDisplay(player)
    if player == localPlayer then return end  -- Don't show health for the local player

    local function applyHealthDisplay(character)
        if character and not character:FindFirstChild("HealthDisplay") then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                -- Create BillboardGui for health display
                local healthDisplay = Instance.new("BillboardGui")
                healthDisplay.Name = "HealthDisplay"
                healthDisplay.Adornee = character:FindFirstChild("Head")
                healthDisplay.Size = UDim2.new(0, 100, 0, 50)  -- Adjust size of the display
                healthDisplay.StudsOffset = Vector3.new(0, 3, 0)  -- Position above the head
                healthDisplay.AlwaysOnTop = true  -- Keep on top of other elements
                healthDisplay.Parent = character

                -- Create TextLabel for the health
                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                textLabel.TextStrokeTransparency = 0.8
                textLabel.TextScaled = false  -- Disable automatic scaling
                textLabel.TextSize = 14  -- Set a smaller font size
                textLabel.Parent = healthDisplay

                -- Update health display dynamically
                local function updateHealth()
                    textLabel.Text = "Health: " .. math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth)
                end

                humanoid.HealthChanged:Connect(updateHealth)
                updateHealth()  -- Initial health update

                -- Listen for when the character dies and respawns
                character:WaitForChild("Humanoid").Died:Connect(function()
                    textLabel.Text = "Health: 0/" .. math.floor(humanoid.MaxHealth)
                end)
            end
        end
    end

    -- Check if the player's character already exists and apply health display
    if player.Character then
        applyHealthDisplay(player.Character)
    end

    -- Listen for the player respawning and apply health display to new character
    player.CharacterAdded:Connect(function(character)
        applyHealthDisplay(character)
    end)
end

-- Function to find the closest player
local function getClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local charPart = player.Character.Head
            local screenPoint, onScreen = Camera:WorldToViewportPoint(charPart.Position)

            if onScreen then
                local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - screenCenter).Magnitude

                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

-- Function to rotate character physically towards a target's head
local function rotateCharacterToTarget(targetPosition)
    local charPosition = localPlayer.Character.HumanoidRootPart.Position
    local lookVector = (targetPosition - charPosition).Unit

    -- Get new rotation CFrame
    local newRotation = CFrame.new(charPosition, charPosition + lookVector)

    -- Apply rotation to move the character's physical body smoothly
    localPlayer.Character.HumanoidRootPart.CFrame = localPlayer.Character.HumanoidRootPart.CFrame:Lerp(newRotation, 0.2)
end

-- Right Click Holding State for Camera Lock
local holdingRightClick = false

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        holdingRightClick = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        holdingRightClick = false
    end
end)

-- Camera & Character Rotation Logic
RunService.RenderStepped:Connect(function()
    if holdingRightClick then
        local targetPlayer = getClosestPlayer()

        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
            local targetPosition = targetPlayer.Character.Head.Position
            local camPosition = Camera.CFrame.Position

            -- Move camera to look at target's head
            Camera.CFrame = CFrame.new(camPosition, targetPosition)

            -- Physically rotate the player's character to face target's head
            rotateCharacterToTarget(targetPosition)
        end
    end
end)

-- Loop to add outlines and health displays for players continuously
RunService.Heartbeat:Connect(function()
    for _, player in pairs(Players:GetPlayers()) do
        -- Only add outline and health display if not already added
        if player.Character then
            if not player.Character:FindFirstChild("OutlineHighlight") then
                addOutline(player)
            end
            if not player.Character:FindFirstChild("HealthDisplay") then
                addHealthDisplay(player)
            end
        end
    end
end)

-- Add outlines and health display to all current players
for _, player in pairs(Players:GetPlayers()) do
    addOutline(player)
    addHealthDisplay(player)
end

-- Listen for new players joining and add outline and health display
Players.PlayerAdded:Connect(function(player)
    addOutline(player)
    addHealthDisplay(player)
end)
